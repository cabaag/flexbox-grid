@import '_sizes';

$flex: (
   grow: 1 1 100%,
   initial: 0 1 auto,
   auto: 1 1 auto,
   none: 0 0 auto,
   noshrink: 1 0 auto,
   nogrow: 0 1 auto,
   0: 1 1 0%,
);

.flex {
   flex: 1;
   box-sizing: border-box;
}
.layout.row > .flex {
   min-width: 0;
}
.layout.column > .flex {
   min-height: 0;
}

@each $name, $value in $flex {
   .flex-#{$name} {
      flex: $value;
      box-sizing: border-box;
      @if ($name == 0) {
         max-width: 0;
         max-height: 100%;
      }
   }
}

@mixin set-size($size, $flex-size, $breakpoint: null) {
   .column > .flex-#{$breakpoint}-#{$flex-size},
   .row > .flex-#{$breakpoint}-#{$flex-size} {
      flex: 1 1 $size;
      box-sizing: border-box;
   }
   .column > .flex-#{$breakpoint}-#{$flex-size} {
      max-height: $size;
   }
   .row > .flex-#{$breakpoint}-#{$flex-size} {
      max-width: $size;
   }
}

@mixin set-size-default($size, $flexWidth) {
   .column > .flex-#{$flexWidth},
   .row > .flex-#{$flexWidth} {
      flex: 1 1 $size;
      box-sizing: border-box;
   }
   .column > .flex-#{$flexWidth} {
      max-height: $size;
   }
   .row > .flex-#{$flexWidth} {
      max-width: $size;
   }
}

@each $breakpoint, $query in $sizes {
   @if ($query = 'only screen') {
      @for $i from 0 through 12 {
         @include set-size-default((percentage($i) / 12), $i);
      }
   } @else {
      @media #{$query} {
         @for $i from 0 through 12 {
            @include set-size((percentage($i) / 12), $i, $breakpoint);
         }
      }
   }
}
